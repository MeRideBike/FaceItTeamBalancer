@page "/"
@inject HttpClient Http
@using FaceItTeamBalancer.Components.Models;

<h3>FACEIT Team Builder</h3>

<div>
    <h4>Add Player</h4>
    <input placeholder="Name" @bind="newPlayer.Name" />
    <input type="number" placeholder="Rank (1-10)" @bind="newPlayer.FaceitRank" />
    <input placeholder="Role (optional)" @bind="newPlayer.Role" />
    <button @onclick="AddPlayer">Add</button>
</div>

<br />

@if (players.Any())
{
    <h4>Players:</h4>
    <ul>
        @foreach (var p in players)
        {
            <li>@p.Name (Rank @p.FaceitRank, @p.Role)</li>
        }
    </ul>

    <button @onclick="GenerateTeams">Generate Balanced Teams</button>
}

@if (teamA.Players.Any())
{
    <h4>Team A (Total Rank: @teamA.TotalRank)</h4>
    <ul>
        @foreach (var p in teamA.Players)
        {
            <li>@p.Name (Rank @p.FaceitRank)</li>
        }
    </ul>

    <h4>Team B (Total Rank: @teamB.TotalRank)</h4>
    <ul>
        @foreach (var p in teamB.Players)
        {
            <li>@p.Name (Rank @p.FaceitRank)</li>
        }
    </ul>
}

@code {
    List<Player> players = new();
    Player newPlayer = new() {Name = ""};

    Team teamA = new() { Id = 1};
    Team teamB = new() { Id = 2};

    async Task AddPlayer()
    {
        players.Add(new Player
            {
                Name = newPlayer.Name,
                FaceitRank = newPlayer.FaceitRank,
                Role = newPlayer.Role
            });

        newPlayer = new() { Name = ""}; // Reset input
    }

    async Task GenerateTeams()
    {
        var response = await Http.PostAsJsonAsync("api/teams/generate", players);

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<BalanceResult>();

                teamA = result.TeamA;
                teamB = result.TeamB;
        }
    }

    class BalanceResult
    {
        public Team TeamA { get; set; }
        public Team TeamB { get; set; }
    }
}
